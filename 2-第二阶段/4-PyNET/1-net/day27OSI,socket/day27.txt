day27 2018.5.9
吕泽  lvze@tedu.cn   

1.网络-->进程线程-->web服务器-->mongo-->regex-->项目
2.编程原则:
  高类聚:功能尽量单一
  低耦合:相互独立性高
3.网 络体系结构标准OSI模型:
  应用层:提供用户服务
  表示层:提供数据压缩解压和加密
  会话层:建立程序级连接,决定用什么传输服务
  传输层:提供合适的通信服务,流量控制
  网络层:路由选择,网络互联,分组传输
  链路层:提供链路交换,具体消息发送
  物理层:物理硬件,接口
  优点:将功能分开,降低网络传输的耦合度,
        每一部分完成自己的功能,结构清晰
  四层或五层模型应用更广泛
  四层:应用层(应用,表示,会话),传输层,网络层,物理链路层
  TCP/IP五层模型:
  应用层(应用,表示,会话),传输层,网络层,链路层,物理层
4.协议:网络协议:
  即在网络传输过程中为保证通信正常而制定的都遵守的约定 
  1.应用层协议:TFTP,DNS,FTP,SMTP,HTTP
  2.传输层   :TCP,UDP
  3.网络层   :IP,ARP,ICMP 
  4.物理链路层:IEEE 
5.socket模块
  gethostname() -- return the current hostname
  gethostbyname() -- map a hostname to its IP number
  gethostbyaddr() -- map an IP number or hostname to DNS info
  inet_aton() -- convert IP addr string (123.45.67.89) to 32-bit packed format
  inet_ntoa() -- convert 32-bit packed format IP to string (123.45.67.89)
  getservname("程序名"):返回端口号
6.IP:
  IPV4:点分十进制
  127.0.0.1:本地测试IP
  0.0.0.0:局域网可用IP
  x.x.x.0:网段
  x.x.x.1:网关
  x.x.x.255:广播地址
7.端口号:
  地址的组成部分,区分应用层程序
  1-65535:1-255:众所周知的端口,256-1023:系统端口
8.子网掩码:和IP配合过滤网段 DNS:域名解析
9.字节序:`
  大端序:高字节存在低地址
  小端序:低字节存在高地址
  网络字节序:将字节序发送接受方式统一
10.传输层服务:
  1.tcp协议-面向连接的可靠的数据传输:
    1.特点:
      数据的可靠性:无重复 无丢失 无失序 无错误
      传输服务必须建立连接,传输数据必须保证可靠,
      传输结束必须断开连接
    2.使用情况:
      对传输质量要求较高,需要可靠的传输.
      传输的数据量较大（比如传文件）不需要频繁的连接断开
    3.三次握手:
      1.客户端向服务端发送连接请求(发送一个试探性的标志字符给服务器）
        SYN=1,Sep=x
      2.服务器端接受到请求后告知客户端可以连接
        SYN=1,ACK=x+1,Sep=y
      3.再次告知服务器客户端已经收到回复，下面要开始发送具体消息
        ACK=y+1,Sep=z
    4.四次挥手:
      1.主动方发送报文告知被动方要断开连接
        fin=1,Ack=z,Sep=x
      2.被动方返回报文告知主动方已经接受到你的请求
        Ack=x+1,Seq=z
      3.被动方会再次发送报文表示已经准备就绪可以断开
        fin=1,Ack=x,Sep=y
      4.主动方断开连接告知被动方
        Ack=y,sep=x
  2.udp协议-面向无连接的不可靠服务
    1.特点:
      不保证数据的完整性
      数据的发送都是由发起端决定的，不考虑接收端的情况
      没有三次握手和四次回收的过程
      对实时性要求较高
    2.使用情况:
      网络情况不佳的时候
      对数据的准确性没有严格要求
      建立必要的非连接的情况(比如广播组播)
11.套接字编程:
  1.套接字(socket):进行网络通信的一种手段
  2.套接字的分类
    1.流式套接字(SOCK_STREAM):
      传输层使用tcp协议提供面向连接的传输服务 
    2.数据报套接字(SOCK_DGRAM):
      传输层使用udp协议提供面向无连接的传输服务 
    3.原始套接字(SOCK_RAW):
      一般用作底层协议测试(用不到)
  3.TCP服务端操作步骤:
    from socket import *
    1.创建套接字
      socket(socket_family=AF_INET,
             socket_type=SOCK_STREAM,proto=0)
      功能:创建套接字
      参数:选择地址族种类,套接字类型,子协议类型
      返回值:返回创建的套接字
    2.绑定IP和端口号
      .bind(address)
      功能:绑定本机的IP和端口号
      参数:是一个包含两个元素的元组,
          第一个元素是字符串形式的IP，第二个是使用的端口号
    3.让套接字有监听功能
      .listen(n)
      功能:将套接字设置为监听套接字,并且设置一个监听队列
      参数:是一个正整数,监听队列大小
    4.等待客户端连接
      .accept()
      功能:阻塞等待客户端的连接 
      参数:无
      返回值:第一个返回值:新的套接字用来和客户端通信
          第二个返回值:连接进来的客户端的address
    5.消息的收发
      1..recv(buffer)
        功能:接收网络消息
        参数:正整数 表示一次接收从缓冲区中拿到的消息的字节数
        返回值:返回接收到的消息
        * 当接受的网络缓冲中没有内容时会阻塞
        * 当连接断开后，recv会结束阻塞返回一个空字串
      2..send(data)
        功能:发送网络消息
        参数:要发送的内容  
        返回值:实际发送的字节数
        *python3中要求send的内容必须为bytes格式
        无接受端时,会引发brokenpipe异常
      3..sendall(data)
        功能:发送网络消息
        参数:要发送的内容要求为bytes格式
        返回值:如果成功发送返回None发送失败报异常
    6.关闭套接字
      .close() 
      功能:关闭一个套接字
  4.tcp客户端流程:
    1.创建流式套接字
    2.发起连接请求:
      connect()
      功能:发起连接
      参数:一个元组,1.服务器IP 2.服务器port
    3.收发信息
    4.关闭套接字
    










