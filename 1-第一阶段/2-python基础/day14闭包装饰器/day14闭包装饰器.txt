day14 2018.4.19

1.闭包closure
  1.将内嵌函数的语句和这些语句的执行环境打包在一起,得到的函数对象称为闭包
  2.在函数嵌套时,如果外函数发现自己的临时变量将来会在内函数中用到,就把这个临时变量绑定给内函数,自己再结束
    1.外函数返回了内函数的引用
    2.外函数把临时变量绑定给了内函数
    3.如果内函数想修改外函数的局部变量就用nonlocal声明
    4.每次开启内函数都是在用同一份闭包变量
  3.示例
    def makepower(y):
        def fn(x):x**y
        return fn
    pow2=makepower(2)
    pow3=makepower(3)
    print('5的平方是:',pow2(5))
    print('5的立方是:',pow3(5))
2.装饰器decorators:
  1.是一个函数,主要作用是包装另一个函数或类,包装的目的是在不改变原函数名的情况下改变被包装对象的行为
  2.函数装饰器function decorators:
    指装饰器是个函数,传入/返回的都是函数
  3.示例
    def mydeco(fn): #装饰器函数
        def fx():
            print('+++++++')
            fn()
            print('-------')
        return fx
    @mydeco
    def hello():print('hello') #被装饰函数 
    #hello=mydeco(hello)#此做法可用装饰器@语法解决
    hello() ++++++++++  
               hello
            ----------
3.函数的文档字符串:
  1.语法
    def 函数名(参数列表):
        '''函数的文档字符串'''
        函数语句块
  2.文档字符串通常用来说明本函数的功能和使用方法
  3.在交互模式下输入help(函数名)可以查看函数的文档字符串
4.函数的__doc__属性:
  1.函数内第一次未赋值给任何变量的字符串是此函数的文档字符串,此字符串会自动赋值给函数的__doc__属性
  2.示例
    def cab():
        'sdgdsdf'
        pass
    print(cba.__doc__)#sdgdsdf
5.函数定义语句的完整语法:
  [@装饰器1]
  [@装饰器2]
  ....
  def 函数名([位置形参],[*元组形参],[命名关键字形参],
  [**字典形参]):
      '文档字符串'
      语句块
6.模块module:
  1.模块上一个包含一系列变量,函数,类等组成的程序组
  是一个文件,通常以.py结尾
  2.分类:
    1.内置
    2.标准库
    3.第三方
    4.自己编写
7.模块的导入
  1.import 模块名1[as 模块新名1]...
  2.from 模块名 import 模块属性名 [as属性新名1]
8.dir函数:
  1.dir([对象]) 返回一个字符串列表
  2.无参数调用时,返回当前作用域下所有变量的列表
  3.给定一个对象作为参数时,返回这个对象的所有变量的列表
  4.对于模块返回模块的全部属性
  5.对于类,返回类的所有变量,并递归基类对象的所有属性
  6.对其他的对象,返回所有变量,类变量和基类变量


















