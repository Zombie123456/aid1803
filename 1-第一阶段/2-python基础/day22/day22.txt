day22 2018.5.2

对象的属性管理函数
      函数                  说明
  getattr(obj, name[, default])   从一个对象得到对象的属性；getattr(x, 'y') 等同于x.y; 当属性不存在时,如果给出default参数,则返回default,如果没有给出default则产生一个AttributeError错误

  hasattr(obj, name)  用给定的name返回对象obj是否有此属性,此种做法可以避免在getattr(obj, name)时引发错误

  setattr(obj, name, value)   给对象obj的名为name的属性设置相应的值value, set(x, 'y', v)等同于 x.y = v

  delattr(obj, name)  删除对象obj中的name属性, delattr(x, 'y') 等同于 del x.y

异常(高级)
  with 语句
  with 表达式1 [as 变量1], 表达式2 [as 变量2], ...:
      语句块
  作用:
    使用于对资源访问的场合,确保使用过程中不管是否发生异常都会执行必要的"清理"操作,并释放资源.ex:文件打开后自动关闭,线程中锁的自动获取和释放(线程后面会讲)
  说明:
    with语句与try-finally相似,不会必变异常状态,as子句用于绑定表达式创建的对象
  ex:
    with.py

环境管理器:
  1.有__enter__和 __exit__方法的类叫做环境管理器
  2.能够用with语句进行管理的对象必须是环境管理器
  3.__enter__将在进入with语句时被调用,并返回由as变量管理的对象
  4.__exit__方法将在离开with语句时被调用,且可以用参数来判断离开with语句时是否有异常发生并做相应的处理.
  ex:
    filewrite.py

运算符重载
  让自定义的类生成的对象(实例)能够使用运算符进行操作
  作用：
　　  让实例象数学表达式一样的进行运算操作
    让程序简结易读
  说明:
    运算符重载方法的参数已经有了固定的含义,不建议改变原有的含义

算术运算符:
    方法名        运算符名
  __add__(self, rhs)       +(加法)
  __sub__(self, rhs)       -(减法)
  __mul__(self, rhs)       *(乘法)
  __truediv__(self, rhs)  /(除法)
  __floordiv__(self, rhs) //(地板法)
  __mod__(self, rhs)       %(求余/取模)
  __pow__(self, rhs)       **(幂运算)
  二元运算符的重载格式：
　　  def __xxx__(self, other):pass
  注:二元运算符的重载方法参数列表中只能有两个参数

反向算术运算符的重载
    方法名        运算符名         操作方式
  __radd__(self, lhs)       +(加法)      lhs + self
  __rsub__(self, lhs)       -(减法)      lhs - self
  __rmul__(self, lhs)       *(乘法)      lhs * self
  __rtruediv__(self, lhs)   /(除法)      lhs / self
  __rfloordiv__(self, lhs) //(地板法)    lhs // self
  __rmod__(self, lhs)      %(求余/取模)  lhs % self
  __rpow__(self, lhs)     **(幂运算)    lhs ** self
  注：
    lhs (left hand side)  左手边
    rhs (right hand side) 右手边

复合赋值运算符的重载:
  __iadd__(self, rhs)     加法赋值  self += rhs
  __isub__(self, rhs)     减法赋值  self -= rhs
  __imul__(self, rhs)     乘法赋值  self *= rhs
  __itruediv__(self, rhs) 除法赋值  self /= rhs
  __ifloor__(self, rhs)   地板除赋值 self //= rhs
  __imod__(self, rhs)     求余赋值  self %= rhs
  __ipow__(self, rhs)     幂赋值    self **= rhs

比较运算符的重载
  __lt__    <    小于    (little than)
  __le__    <=   小于等于
  __gt__    >    大于
  __ge__    >=   大于等于 (greate equal)
  __eq__    ==   等于
  __ne__    !=   不等于
  注:通常返回True或False

位运算符重载：
　 __invert__   ~  取反(一元运算符)
  __and__      &  位与(交集)
  __or__       |  位或(并集)
  __xor__      ^  位异或(对称补集)
  __lshift__   << 左移
  __rshift__   >> 右移
反向位运算符重载
  __rand__      &  位与(交集)
  __ror__       |  位或(并集)
  __rxor__      ^  位异或(对称补集)
  __rlshift__   << 左移
  __rrshift__   >> 右移
复合赋值位运算符重载:
  __iand__      &=  位与(交集)
  __ior__       |=  位或(并集)
  __ixor__      ^=  位异或(对称补集)
  __ilshift__   <<= 左移
  __irshift__   >>= 右移

一元运算符的重载:
  __neg__    -(负号)
  __pos__    +(正号)
  __invert__ ~ 取反

一元运算符的重载语法
  def __xxx__(self):

in /not in 运算符的重载
  格式:
    def __contains__(self, e):pass
  说明:
    当重载in运算符后, not in运算符也同样可用,
    not in 相当于in 的返回值取反
 
索引和切片运算符的重载
  运算符:
    []  字典,字符串,列表,元素
  重载方法:
    __getitem__(self, i)       用于索引/切片获取值
    __setitem__(self, i, val)  用于索引/切片设置值
    __delitem__(self, i)       用于del 语句删除索引操作
    让自定义类型的对象能够支持索引和切片操作

函数调用运算符的重载
  调用格式:
    对象(调用实参)
  重载方法：
  　　def __call__(self, 参数列表):pass
  注：
  　　此重载方法的参数列表里的参数个数不受限制
  作用：
    让类创建的对象能象函数一样被调用

函数注释:
  python3及之后版本才存在

  def mydiv(a:5, b:sum) -> float:
      """这是函数注释的示例"""
      return a / b


位操作:
  位运算符:
    &  位与
    |  位或
    ^  位异或
    << 左移
    >> 右移
    ~  求反
  位与 &
    格式:
      整数表达式x & 整数表达式y
    作用:
      按位操作,两个对应的位都为1,则结果为1,否则结果为0
    示例:
      x = 10
      y = 12
      z = x & y
      print(z)  # 8
    解析:
        0b1010
      & 0b1100
      ---------
        0b1000
  位或 |
    格式:
      x | y
    作用:
      按位操作,两个对应的位只要有一个位为1,则结果为1,否则结果为0

    示例:
    x = 10
    y = 12
    z = x | y
    print(z)  # 14
    解析:
        0b1010
      | 0b1100
      ---------
        0b1110  (14)
  位异或 ^
    格式:
      x ^ y
    作用:
      按位操作,两个对应的位不同,结果为1;两个对应的位相同,结果为0
    示例:
    x = 10
    y = 12
    z = x ^ y
    print(z)  # 6
    解析:
        0b1010
      ^ 0b1100
      ---------
        0b0110  (6)
  << 左移运算符
    格式:
      整数表达式x << 整数表达式y
    作用:
      将 x 的二进制值按位向左移动y位,低位补0
    x = 0b110 # 6
    z = x << 1
    print(z)       # 12  --->   0b1100
    print(x << 2)  # 24  --->  0b11000
    print(x << 3)  # 48  ---> 0b110000
  >> 右移运算符
    格式:
      整数表达式x >> 整数表达式y
    作用:
      将x的二进制值,接位向右移动y位,低位溢出丢弃
    x = 6  # 0b110
    0b110 >> 1 # --> 0b011 (3)
    0b110 >> 2 # --> 0b001 (1)
    0b110 >> 3 # --> 0b000 (0)
  求反:
    语法格式:
      ~ 整数表达式
    说明:
      按位求反, 0变1,1变量
    -1 求反 00000000
    0求反 -1  (补码表示)
  补码:
    计算机中用于表示负数的一种方式
    用来表示负数
  原码:
    用来表示正数
  负数的表示方式:
    整数部分取反加1
  -5
  5   --->  00000101  (原码)
  1) 取反
      --->  11111010  (反码)
  2) 加1
      --->  11111011  (补码)
  示意:
      打印-5从左到右的8位   11111011 
    L = []
    x = -5
    for i in range(8):
        if x & (1 << i) != 0:
            L.append('1')
        else:
            L.append('0')
    L.reverse()  # 把左右颠倒
    print(L)
    #   11111011  # -5
    # & 00000001  # 1 << 0














