day13 2018.4.18

1.lambda表达式(匿名函数表达式):
  1.创建一个匿名函数对象,同def类似,但不提供函数名
  2.lambda [形参1,形参2,...]:表达式
  3.def myadd(x,y):return x+y
    可改写为myadd=lambda x,y:x+y
  4.lambda比函数简单,可以随时创建和销毁,有利于减少程序的耦合度
  5.def fx(f,x,y):
         r=f(x,y)
         print(r)
    fx((lambda a,b:a+b),100,200)
    fx((lambda x,y:x**y),3,4)
2.eval和exec函数:
  1.eval:
    1.把一个字符串当成一个表达式执行,返回表达式执行后结果
    2.eval(source,globals=None,locals=None)
      x=100;y=200;s='x+y';v=eval(s);print(v)#300
    3.eval('x+y',{'x':10,'y':20})#30
    4.eval('x+y',{'x':10,'y':20},{'x':1})#21
    5.eval('x+y',{'x':10,'y':20},{;x':1,'y':2})#3
  2.exec:
    1.把一个字符串当成程序来执行
    2.exec(source,globals=None,locals=None)
      s='x=100;print('hello');x+=1;print(x)'
      exec(s)# hello 101
3.函数式编程:
  1.用一系列函数解决问题
  2.函数是一等公民
    1.函数本身是对象,可以赋值给变量,赋值后变量绑定函数
    2.允许将函数作为实参传入另一个函数
    3.允许函数返回另一个函数
  3.函数式编程的好处
4.高阶函数high order function
  1.满足下列一个条件的即为高阶函数:
    1.函数接受一个或多个函数作为参数传入
    2.函数返回一个函数
  2.python内置(builtin)的高阶函数
    map filter sorted
    1.map:
      1.map(func,*iterable) 
      2.用函数对可迭代对象中的每一个元素作为参数计算出新的可迭代对象,当最短的一个可迭代对象不在提供数据时,此可迭代对象生成结束
      3.def power2(x):return x**2
        for x in map(power2,range(1,10)):print(x)
        for x in map(pow,[1,2,3],[3,2,1])#1**3,2**2
    2.filter函数:
      1.filter(function or None,iterable)
      2.筛选可迭代对象iterable中的数据,返回一个可迭代对象,此可迭代带对象将对iterable进行筛选
      3.函数func将对iterable中的每个元素进行求值,返回False时将此数据丢弃,返回True,则保留此数据
      4.def isodd(x):return x%2==1#判断是否是奇数
        for x in filter(isodd,range(10)):print(x)
    3.sorted函数:
      1.将原可迭代对象的数据进行排序,生成排序后的列表
      2.sorted(iterable,key=None,reverse=False)
      3.key绑定函数,此函数用来提供一个排序的依据
      4.l=[5,-2,-4,0,3,1];print(sorted(l,key=abs))
5.递归函数recursion:
  1.递归一定要控制递归的层数,符合条件时终止递归
  2.递归函数的实现方法:
    先假设函数已经实现










