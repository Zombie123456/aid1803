day59 2018.6.21

1、urls.py
  1、url函数
    url函数的语法
    url(regex,views,kwargs=None,name=None)
    1、regex
      正则表达式模板，匹配请求的 url
    2、views
      URL处理的视图函数
    3、kwargs
      字典，用来向views传参的，没有参数可以省略
    4、name
      字符串，给 url() 起别名，主要在模板中使用
  2、通过 url 向 views 传参
    1、使用正则表达式传参
      使用子组传参，一个子组是一个参数，想传递多个参数的话，可以使用多个子组
      子组 - ()
      urlpatterns = [
        # 访问路径是 run/ 的时候，交给 run_views 去处理
        url(r'^run/$',run_views),
        # 访问路径是 run/两位数字/ ，交给 run_args_views 去处理
        url(r'^run/(\d{2})/$',run_args_views),
        # 访问路径是 run/四位数字/两位数字/ 
        url(r'^run/(\d{4})/(\d{2})/$',run1_views)
      ]
      注意：
        1、在 url() 中，一个子组()表示一个参数
        2、在views.py中，对应的处理函数要根据url()中子组的个数，相应的定义参数。定义的参数要位于request之后
      ex:
         url(r'^run/(\d{2})/(\d{4})/$', run1_views)
         def run1_views(request, num1, num2)
    2、使用 url() 第三个参数 ，字典传参
      urlpatterns = [
        url(r'^show/$', show_views, {'name':'zsf','age':'25'}),]
      def show_views(request,name,age):
      注意：
        1、视图处理函数中，必须声明参数
        2、参数的名称和位置，必须要与字典中的名称和位置保持一致
2、Django 中的应用
  1、什么是应用
    应用就是网站中的一个独立的模块程序
    在Django中，主目录一般不处理用户的请求，主要做的是项目的初始化及请求的分发
  2、创建应用
    1、命令
      ./manage.py startapp 应用名称
      ex:
        ./manage.py startapp news
    2、在 settings.py 中进行注册
     在 INSTALLED_APPS 中追加应用名称
     INSTALLED_APPS = [
      'django.contrib.admin',
      .... ....,
      'news',
     ]
  3、应用的结构组成
    1、migrations 目录
      存放数据库中间文件的目录(日志文件)
    2、__init__.py
      应用的初始化文件
    3、admin.py
      应用的后台管理配置文件
    4、apps.py 
      应用的属性配置文件，不需改动
    5、models.py
      Models 文件
    6、tests.py
      测试模块
    7、views.py
      定义视图的文件
    练习：
      1、创建 index 应用，并注册
      2、创建 sport 应用，并注册
      3、创建 music 应用，并注册
    练习：
      1、访问路径是 http://localhost:8000/sport/index
        交给 sport 应用中的 urls 处理(找index_views视图)
      2、访问路径是 http://localhost:8000/music/index
        交给 music 应用中的 urls 处理(找index_views视图)
      3、访问路径是 http://localhost:8000/
        交给 index 应用中的 urls 处理(找index_views视图)
3、Django 模板(Template)
	1、什么是模板
		模板是要动态给用户呈现的网页内容
		可以由Views(视图)呈现给用户
		其实就是网页 - 前后端结合的一个网页
	2、模板的设置
		在 settings.py 中 TEMPLATES 变量
		TEMPLATES = [
			{
				'BACKEND':'... ...',
				'DIRS':[... ..],
				... ..
			},
		]
		1、BACKEND ：指定模板的搜索引擎，不用动
		2、DIRS ：指定模板所存放的目录们
			DIRS = ['index.temp','music.temp']
			但是，如果DIRS中为空的话，那么Django会自动到每个应用中去搜索一个叫 templates 的文件夹作为模板管理目录
			推荐：
				1、DIRS 内容保持为空
				2、在每个应用中，创建一个templates的文件夹
		3、APP_DIRS
			True ：首先从DIRS中指定的文件夹中查找模板，如果没找到的话，再搜索templates文件夹
  3、模板的加载方式
		1、使用 loader 获取模板，通过 HttpResponse 进行响应
			from django.template import loader
			def index_views(request):
				#1. 通过loader加载模板
				t=loader.get_template("模板名称")
				#2. 通过t对象，将模板渲染成字符串(允许传递变量到模板中)
				html = t.render({})
				{} : 表示要传递给模板的变量们
					键：变量名
					值：变量的值
					如果没有变量传递的话， 允许省略{}
				#3. 通过HttpResponse将html响应给客户端
				return HttpResponse(html)
		2、使用 render 直接加载并返回模板		
			from django.shortcuts import render
			def xxx_views(request):
				return render(request,'模板名称',{})
	4、模板的语法
    1、变量
      1、作用：允许将后端的数据传递给模板，在模板中，会根据变量的值进行显示
      2、Django中允许传递给模板做变量的数据类型
        数字，字符串，列表，元组，字典，函数，对象
      3、变量的语法
        1、loader
          dic= {'变量1':'值1','变量2':'值2',}
          t = loader.get_template('xxx.html')
          return HttpResponse(t.render(dic))
        2、render
          dic= {'变量1':'值1','变量2':'值2',}
          return render(request,'xx.html',dic)
      4、在模板中使用变量
        {{变量名}}
    2、标签
			1、什么是标签
				允许将服务器端的一些功能嵌入到模板中
			2、语法
				{% 标签内容 %}			
			3、常用标签
				1、for
					{% for 变量 in 列表|元组|字典 %}
					{% endfor %}
					允许使用 for 提供的内置变量 - forloop
					1、forloop.counter : 记录当前循环的次数(从1开始计)
          2、forloop.counter0	循环的当前迭代（从0开始计）
          3、forloop.revcounter	循环结束的迭代次数（从1开始计）
          4、forloop.revcounter0	循环结束的迭代次数（从0开始计）
          5、forloop.first	如果这是第一次通过循环，则为真
          6、forloop.last	如果这是最后一次循环，则为真
          7、forloop.parentloop	对于嵌套循环，这是围绕当前循环的循环
				2、if
					{% if 条件 %}
						满足条件运行的内容
					{% endif %}
          条件中允许使用 比较运算符
          (>,<,>=,<=,==,!=,and,not,or)
          and 和 or 不能同时出现
				3、if ... else...
					{% if 条件 %}
					  满足条件执行的内容
					{% else %}
						不满足条件执行的内容
					{% endif %}
				4、if ...elif ... elif ...else
					{% if 条件1 %}
					 满足条件1运行的内容
					{% elif 条件2 %}
					 满足条件2运行的内容
					{% else %}
					 以上条件都不满足时运行的内容
					{% endif %}
    3、过滤器
			1、作用
				在显示变量的数据之前，允许对数据进行筛选或改变
			2、过滤器的语法
				{{变量|过滤器:参数}}
			3、常用过滤器
				1、{{value|upper}}
					将value变为大写字符输出
				2、{{value|lower}}
					将value变为小写字符输出
				3、{{value|add:num}}
					累加num到value上
				4、{{value|floatformat:n}}
					将value四舍五入到 n 位小数
				5、{{value|truncatechars:n}}
					将字符串进行截取到n位字符(包含...)
					... ...
      
































