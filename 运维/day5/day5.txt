1.概念
  1.django项目(web应用)
  2.web服务器
    1.nginx并发量更高
    2.Apache更稳定
      LNMP: LINUX nginx  mysql php/python/perl
      LAMP: LINUX Apache mysql php/python/perl
    3.uwsgi
      是web服务器和django框架之间的一种简单通用接口
2.单项目部署(nginx+uwsgi+django)
  1.确保django项目能运行
  2.安装nginx
    1.安装
      sudo apt-get install nginx
    2.启动
      sudo /etc/init.d/nginx start
    3.验证
      打开浏览器 127.0.0.1
  3.安装uwsgi
    1.安装
      sudo pip3 install uswgi
    2.验证(用uwsgi启动django项目)
      uwsgi --http :8000 --chdir /home/tarena/fruitday_1
      --module fruitday_1.wsgi
  4.部署
    1.配置uwsgi(配置文件)
      创建目录uwsgi用来存放uwsgi项目的配置文件,每个项目一个配置文件
      mkdir uwsgi
      touch fruit_uwsgi.init
      [uwsgi]
      socked = 127.0.0.1:8000
      chdir = /home/tarena/fruitday_1
      wsgi-file = fruitday/wsgi.py
      processes = 4
      threads = 2
      stats = 127.0.0.1:8080
    2.配置nginx(配置文件)
      1.改配置文件
        sudo -i 
        cd /etc/nginx/sites-enabled/
        subl project_nginx.conf
      2.拷贝uwsgi_params文件到项目目录
        cp /etc/nginx/uwsgi_params /home/tarena/fruitday_1
      3.重启nginx服务
        sudo /etc/init.d/nginx restart
    3.收集静态文件
      1.在项目settings.py 添加
        STATIC_ROOT = 'home/tarena/fruitday_1/static'
      2.收集静态文件
        python3 manage.py collectstatic
    4.用uwsgi启动django项目
      cd uwsgi/
      uwsgi --ini fruitday_uwsgi.ini
3.多项目部署
  1.每个项目需要创建单独的uwsgi配置文件,选用不同端口
  2.nginx配置文件只需一个,添加server{....}
4.设置开机自启动django项目
  1.编写py文件 project.py
    import os
    uwsgi_files = os.listdir('home/tarena/uwsgi)
    for i in uwsgi_files:
        os.system('uwsgi --ini home/tarena/uwsgi/%s' % i)
  2.编写sh脚本文件 project.sh
    #!/bin/bash
    python3 /home/tarena/project.py
  3.添加到开机自启动
    1.拷贝到/etc/init.d/
      sudo cp project.sh /etc/init.d/
    2.修改权限
      sudo chmod 755 project.sh
    3.添加到开机自启动
      sudo updata-rc.d project.sh defaults 99






























